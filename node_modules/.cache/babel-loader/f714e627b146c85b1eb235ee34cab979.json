{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER, SET_PARTS } from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\nimport authHeader from \"../securityUtils/authorisationHeader\";\nexport const createNewUser = (newUser, history) => async (dispatch) => {\n  await axios({\n    url: \"https://park-reservation.herokuapp.com/api/users/register\",\n    method: 'post',\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    data: newUser\n  }).then(response => {\n    history.push(\"/\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  });\n};\nexport const login = LoginRequest => async dispatch => {\n  try {\n    // post => Login Request\n    const res = await axios({\n      url: \"https://park-reservation.herokuapp.com/api/users/login\",\n      method: 'post',\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      },\n      data: LoginRequest\n    }); // extract token from res.data\n\n    const {\n      token\n    } = res.data; // store the token in the localStorage\n\n    localStorage.setItem(\"jwtToken\", token); // set our token in header ***\n\n    setJWTToken(token); // decode token on React\n\n    const decoded = jwt_decode(token); // dispatch to our securityReducer\n\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: decoded\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type: SET_CURRENT_USER,\n    payload: {}\n  });\n};\n/*\nexport const saveScore = score => async dispatch => {\n    // post => Login Request\n    await axios(\n    {\n      url:'/api/parts',\n      method:'post',\n      data: score\n    }\n    ).catch(err=>\n    {\n      dispatch(\n        {\n          type: GET_ERRORS,\n          payload: err.response.data\n        });\n      \n    });\n}\n\nexport const findParts = () => async dispatch => {\n     await axios.get(\"/api/parts\",{\"Authorisation\":authHeader})\n    .then(response=>{\n      const parts = response.data;\n      dispatch({\n      type:SET_PARTS ,\n      payload: parts \n      })\n    })\n    .catch(error=>{\n      dispatch(\n        {\n          type: GET_ERRORS,\n          payload: error.response.data\n        });\n    });\n    \n  }\n  */","map":{"version":3,"sources":["/home/abdel/Desktop/parking-reservation-front-react/src/actions/securityActions.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","SET_PARTS","setJWTToken","jwt_decode","authHeader","createNewUser","newUser","history","dispatch","url","method","headers","data","then","response","push","type","payload","catch","error","console","log","login","LoginRequest","res","token","localStorage","setItem","decoded","err","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,SAAvC,QAAuD,SAAvD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB,OAAMC,QAAN,KACnD;AAEI,QAAMV,KAAK,CAAC;AACVW,IAAAA,GAAG,EAAC,2DADM;AAEVC,IAAAA,MAAM,EAAC,MAFG;AAGVC,IAAAA,OAAO,EAAE;AAAC,qCAA+B;AAAhC,KAHC;AAIVC,IAAAA,IAAI,EAAEN;AAJI,GAAD,CAAL,CAKLO,IALK,CAKAC,QAAQ,IAAE;AACdP,IAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AACAP,IAAAA,QAAQ,CACR;AACEQ,MAAAA,IAAI,EAAEjB,UADR;AAEEkB,MAAAA,OAAO,EAAE;AAFX,KADQ,CAAR;AAKD,GAZK,EAYHC,KAZG,CAYGC,KAAK,IAAE;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAX,IAAAA,QAAQ,CACR;AACEQ,MAAAA,IAAI,EAAEjB,UADR;AAEEkB,MAAAA,OAAO,EAAEE,KAAK,CAACL,QAAN,CAAeF;AAF1B,KADQ,CAAR;AAKD,GAnBK,CAAN;AAoBH,CAvBM;AAyBP,OAAO,MAAMU,KAAK,GAAGC,YAAY,IAAI,MAAMf,QAAN,IAAkB;AACrD,MAAI;AACF;AACA,UAAMgB,GAAG,GAAG,MAAM1B,KAAK,CAAC;AACtBW,MAAAA,GAAG,EAAC,wDADkB;AAEtBC,MAAAA,MAAM,EAAC,MAFe;AAGtBC,MAAAA,OAAO,EAAE;AAAC,uCAA+B;AAAhC,OAHa;AAItBC,MAAAA,IAAI,EAAEW;AAJgB,KAAD,CAAvB,CAFE,CAQF;;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAYD,GAAG,CAACZ,IAAtB,CATE,CAUF;;AACAc,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAXE,CAYF;;AACAvB,IAAAA,WAAW,CAACuB,KAAD,CAAX,CAbE,CAcF;;AACA,UAAMG,OAAO,GAAGzB,UAAU,CAACsB,KAAD,CAA1B,CAfE,CAgBF;;AACAjB,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAChB,gBADE;AAEPiB,MAAAA,OAAO,EAAEW;AAFF,KAAD,CAAR;AAID,GArBD,CAqBE,OAAOC,GAAP,EACF;AACErB,IAAAA,QAAQ,CACR;AACEQ,MAAAA,IAAI,EAAEjB,UADR;AAEEkB,MAAAA,OAAO,EAAEY,GAAG,CAACf,QAAJ,CAAaF;AAFxB,KADQ,CAAR;AAKD;AACF,CA9BM;AAgCP,OAAO,MAAMkB,MAAM,GAAG,MAAMtB,QAAQ,IAAI;AACtCkB,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB;AACA7B,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAM,EAAAA,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAChB,gBADE;AAEPiB,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;AAID,CAPM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS, SET_CURRENT_USER ,SET_PARTS} from \"./types\";\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\nimport authHeader from \"../securityUtils/authorisationHeader\"\n\nexport const createNewUser = (newUser, history) => async dispatch => \n{\n  \n    await axios({\n      url:\"https://park-reservation.herokuapp.com/api/users/register\",\n      method:'post',\n      headers: {'Access-Control-Allow-Origin': '*'},\n      data: newUser})\n    .then(response=>{\n      history.push(\"/\");\n      dispatch(\n      {\n        type: GET_ERRORS,\n        payload: {}\n      });\n    }).catch(error=>{\n      console.log(error);\n      dispatch(\n      {\n        type: GET_ERRORS,\n        payload: error.response.data\n      });\n    });\n};\n\nexport const login = LoginRequest => async dispatch => {\n  try {\n    // post => Login Request\n    const res = await axios({\n      url:\"https://park-reservation.herokuapp.com/api/users/login\",\n      method:'post',\n      headers: {'Access-Control-Allow-Origin': '*'},\n      data: LoginRequest}\n      );\n    // extract token from res.data\n    const { token } = res.data;\n    // store the token in the localStorage\n    localStorage.setItem(\"jwtToken\", token);\n    // set our token in header ***\n    setJWTToken(token);\n    // decode token on React\n    const decoded = jwt_decode(token);\n    // dispatch to our securityReducer\n    dispatch({\n      type:SET_CURRENT_USER ,\n      payload: decoded\n    });\n  } catch (err) \n  {\n    dispatch(\n    {\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setJWTToken(false);\n  dispatch({\n    type:SET_CURRENT_USER ,\n    payload: {}\n  });\n};\n/*\nexport const saveScore = score => async dispatch => {\n    // post => Login Request\n    await axios(\n    {\n      url:'/api/parts',\n      method:'post',\n      data: score\n    }\n    ).catch(err=>\n    {\n      dispatch(\n        {\n          type: GET_ERRORS,\n          payload: err.response.data\n        });\n      \n    });\n}\n\nexport const findParts = () => async dispatch => {\n     await axios.get(\"/api/parts\",{\"Authorisation\":authHeader})\n    .then(response=>{\n      const parts = response.data;\n      dispatch({\n      type:SET_PARTS ,\n      payload: parts \n      })\n    })\n    .catch(error=>{\n      dispatch(\n        {\n          type: GET_ERRORS,\n          payload: error.response.data\n        });\n    });\n    \n  }\n  */"]},"metadata":{},"sourceType":"module"}